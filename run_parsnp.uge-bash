#!/usr/bin/env bash


usage() {
  echo "
Usage: ${0##*/} InputDirectory [OutputDirectory] [-h|--help]

Required:
  <InputDirectory>   All assembly files ending in fa,fas,
                     fsa,fna,fasta will be analyzed.

Optional:
  -h | --help        Show this help message and exit.

  <OutputDirectory>  Location for the output files, which
                     includes job logfiles. Output files
                     will be overwritten if already present.
                     Default: current working directory.

  "
  }

verify_file()
{
  # $1=filename; $2=file description
  # $3=size in Bytes (requires c, k, M, or G prefix)
  if [ -f  "${1}" ]; then
    if [ -s  "${1}" ]; then
      if [[ $(find -L "${1}" -type f -size +"${3}") ]]; then
        return
      else
        echo "ERROR: ${2} file ${1} present but < ${3}B" >&2
        false
      fi
    else
      echo "ERROR: ${2} file ${1} present but empty" >&2
      false
    fi
  else
    echo "ERROR: ${2} file ${1} absent" >&2
    false
  fi
}

check_submit_status()
{
  # 1=job ID number; 2=job IDs logfile
  if [[ $1 != *submitted* ]]; then
    echo 'ERROR: improper job submission' >&2
    exit 1
  fi
  echo "$1" >> "$2"
}

# Requirements
command -v qsub >/dev/null 2>&1 || { echo 'ERROR: qsub not found' >&2; exit 1; }
[[ $1 == "--help" || $1 == "-h" ]] && { usage; exit 0; }
if [[ $# -lt 1  || $# -gt 2 ]]; then
  echo "ERROR: improper number ("$#") of arguments provided" >&2
  usage
  exit 1
fi
source $HOME/.bashrc
if [[ -z "$LAB_HOME" ]]; then
  echo 'ERROR: $LAB_HOME not set' >&2
  exit 1
fi

# I/O handling
IN=$(readlink -f "$1")
if [[ -z "$2" ]]; then
  OUT="${PWD}"
else
  OUT=$(readlink -f "$2")
fi
[ ! -d "$OUT"/.log ] && mkdir -pv "$OUT"/.log > /dev/null
LOG_BASE=$(basename $0 .uge-bash)
LOGFILE="$OUT"/.log/"$LOG_BASE".log.txt
JOB_IDS="$OUT"/.log/"$LOG_BASE".job_ids.txt

# Log system and user info for debugging
echo "[START]           $(date)" > "$LOGFILE"
echo "[SYS]             $(uname -nro)" >> "$LOGFILE"
echo "[USER]            $USER" >> "$LOGFILE"
echo "[CWD]             $PWD" >> "$LOGFILE"
source /etc/profile.d/modules.sh && module purge
echo "[MODULES LOADED]  $(module list 2>&1 | \
  sed 's/Currently Loaded Modulefiles://1')" >> "$LOGFILE"
echo -e "[PATH]            $PATH\n" >> "$LOGFILE"
echo "[I/O]" >> "$LOGFILE"
echo "Input directory:  $IN" | tee -a "$LOGFILE"
echo -e "Output directory: $OUT\n" | tee -a "$LOGFILE"

# Handle partially finished analysis
if verify_file "${OUT}/parsnp/parsnp.ggr" 'gingr' '100k' 2> /dev/null; then
  echo 'Located precomputed gingr file'
  if verify_file "${OUT}/parsnp/SNP-distance.matrix.tsv" 'SNP distances' \
  '200c' 2> /dev/null; then
    echo 'Located precomputed SNP distance file'
    echo 'Rename or delete these files to re-analyze the dataset'
    echo 'will not overwrite these files'
    exit 0
  else
    echo 'Submitting job to calculate SNP distances...'
    JID=$(qsub -q all.q -q short.q -pe smp 16-128 -N Parsnp.dists \
      -o ${OUT}/.log -e ${OUT}/.log \
      -v PARSNP_DIR="${OUT}/parsnp" \
      $LAB_HOME/.job/_parsnp-distances.uge-bash)
    check_submit_status "$JID" "$JOB_IDS"
    echo 'The job was submitted, so you can logout and check back later!'
  fi
fi

# Find all input assembly files
cd $IN
if [[ $(find . -maxdepth 1 -type f -regextype posix-extended \
  -regex ".*[[:space:]].*\.(fa|fas|fsa|fna|fasta)" | wc -l) -gt 0 ]]; then
  echo 'ERROR: whitespace within input filenames are not allowed' >&2
  echo 'Offending files are:' >&2
  find . -maxdepth 1 -type f -regextype posix-extended \
   -regex ".*[[:space:]].*\.(fa|fas|fsa|fna|fasta)" \
   -printf '%p\t%s bytes\n' >&2
  exit 1
fi
shopt -s nullglob
ASM=( $IN/*.{fa,fas,fsa,fna,fasta} )
shopt -u nullglob
echo 'Input files:' >> "$LOGFILE"
printf '%s\n' "${ASM[@]}" >> "$LOGFILE"
echo '' >> "$LOGFILE"
echo "Found ${#ASM[@]} genomes..."
echo -e "[ASSEMBLIES]\n$(echo ${ASM[@]} | tr ' ' '\n')\n" | \
  tee -a "$LOGFILE"
if [ ${#ASM[@]} -lt 3 ]; then
  echo 'ERROR: at least 3 genomes are required for batch analysis' >&2
  exit 1
fi

# Report start
NAME="$(stat -c '%U' ${0})"
echo -e "run_parsnp started on $(date) by ${USER}" | mail \
 -s "started ${#ASM[@]} samples for Parsnp [HPC]" \
 -S smtp="smtpgw.cdc.gov" \
 -a "${LOGFILE}" \
 "${NAME:-$USER}@cdc.gov"

# Call SNPs from assembled genomes
JID=$(qsub -q all.q -pe smp 16-128 -N Parsnp.run \
      -e $OUT/.log -o $OUT/.log\
      -v ALL_GENOMES_IN_DIR=$IN,O=$OUT \
      $LAB_HOME/.job/_parsnp.uge-bash)
check_submit_status "$JID" "$JOB_IDS"
JOBS=$(cat "$JOB_IDS" | cut -f 3 -d ' ' | \
  sed -e 's/$/,/' | tr -d '\n' | sed -e 's/,$//')
JID=$(qsub -q all.q -q short.q -pe smp 16-128 -N Parsnp.dists \
      -o ${OUT}/.log -e ${OUT}/.log -hold_jid ${JOBS:-0000001} \
      -v PARSNP_DIR=${OUT}/parsnp \
      $LAB_HOME/.job/_parsnp-distances.uge-bash)
check_submit_status "$JID" "$JOB_IDS"
echo 'The jobs were submitted, so you can logout and check back later'
