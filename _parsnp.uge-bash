#!/usr/bin/env bash


# Help
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo 'this script is not meant to be executed directly'
  exit 0
fi

# Input requirements
source $HOME/.bashrc
source /etc/profile.d/modules.sh
if [ -z $LAB_HOME ]; then
  echo 'ERROR: $LAB_HOME not set' >&2
  exit 1
fi
if [ -z $O ]; then
  echo 'ERROR: $O variable required)' >&2
  exit 1
fi
if [[ -z $ASM_DIR && -z $ALL_GENOMES_IN_DIR ]]; then
  echo 'ERROR: $ASM_DIR and/or $ALL_GENOMES_IN_DIR variable required' >&2
  exit 1
fi

# Test if >2 sequence files
shopt -s nullglob
[ -n $ASM_DIR ] && ASSEMS+=( $ASM_DIR/*.fna )
[ -n $ALL_GENOMES_IN_DIR ] && ASSEMS+=( $ALL_GENOMES_IN_DIR/*.{fa,fas,fsa,fna,fasta} )
shopt -u nullglob
if [ ${#ASSEMS[@]} -lt 3 ]; then
  echo 'ERROR: at least 3 genomes are required for SNP analysis' >&2
  exit 1
fi
echo "${#ASSEMS[@]} genomes will be processed..."

# Symlink assembly files to .tmp and discard file extensions
mkdir -p $O/parsnp/.tmp
for FILE in ${ASSEMS[@]}; do
  BASE=$(basename $FILE)
  NO_EXT="${BASE%.*}"
  ln -sf $FILE $O/parsnp/.tmp/$NO_EXT
done

# Pick reference genome based on largest filesize
LARGEST_SIZE=$(ls -SLr $O/parsnp/.tmp/* | tail -n 1)
REF=$(readlink -f $LARGEST_SIZE)

# Compute distances
module load harvest/1.1.3
parsnp -v -x -c -o $O/parsnp -r $REF -d $O/parsnp/.tmp -p $NSLOTS
if [ ! -f "$O/parsnp/parsnp.ggr" ] || \
[[ ! $(find "$O/parsnp/parsnp.ggr" -type f -size +1k 2> /dev/null) ]]; then
  echo """ERROR: Parsnp failed.
  Check $O/parsnp/parsnpAligner.log or $O/.log/Parsnp.e*""" >&2
  exit 1
fi
rm -rf $O/parsnp/.tmp
harvesttools -i $O/parsnp/parsnp.ggr -S $O/parsnp/SNPs.fa
module unload harvest/1.1.3
module load perl/5.16.1-MT
perl $LAB_HOME/.bin/pairwiseDistances.pl -n $NSLOTS $O/parsnp/SNPs.fa |\
 sort -k3,3n > $O/parsnp/SNP-distance.pairs.tsv
module unload perl/5.16.1-MT
python $LAB_HOME/.bin/pairwiseTo2d.py -i $O/parsnp/SNP-distance.pairs.tsv \
 -o $O/parsnp/SNP-distance.matrix.tsv --sort
sed -i "s/\t-/\t0/g" $O/parsnp/SNP-distance.matrix.tsv

# Cleanup
rm -f $O/parsnp/{all_mumi.ini,parsnpAligner.{ini,log}}
rm -f $O/parsnp/{parsnp.{rec,xmfa},psnn.ini,SNPs.fa}
rm -f $O/parsnp/*.fna.ref
