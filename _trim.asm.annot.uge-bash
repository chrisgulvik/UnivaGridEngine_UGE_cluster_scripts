#!/usr/bin/env bash


# Input requirements
source $HOME/.bashrc
source /etc/profile.d/modules.sh
if [[ -z "$LAB_HOME" ]]; then
  echo 'ERROR: $LAB_HOME not set' >&2
  exit 1
fi
if [[ -z "$R1" || -z "$R2" || -z "$B" || -z "$O" ]]; then
  echo 'ERROR: R1 R2 B O (4 variables required)' >&2
  exit 1
fi

# Setup dir structure
mkdir -p $O/{trim_reads,asm,annot,qa}

# Remove PhiX
module load java/jdk1.8.0_131 BBMap/35.92
PHIX=$LAB_HOME/.lib/PhiX_NC_001422.1.fasta
bbduk.sh -Xmx20g threads=$NSLOTS k=31 hdist=1 ref="$PHIX" in="$R1" in2="$R2"\
 out=$O/trim_reads/"$B"-noPhiX-R1.fsq out2=$O/trim_reads/"$B"-noPhiX-R2.fsq\
 overwrite=t
module unload java/jdk1.8.0_131 BBMap/35.92

# Adapter clip and quality trim
module load java/jdk1.8.0_131 trimmomatic/0.35
ADAPTERS=$LAB_HOME/.lib/adapters_Nextera_NEB_TruSeq_NuGEN.fas
trimmomatic PE -phred33 -threads $NSLOTS\
 $O/trim_reads/"$B"-noPhiX-R1.fsq $O/trim_reads/"$B"-noPhiX-R2.fsq\
 $O/trim_reads/"$B"_R1.paired.fq $O/trim_reads/"$B"_R1.unpaired.fq\
 $O/trim_reads/"$B"_R2.paired.fq $O/trim_reads/"$B"_R2.unpaired.fq\
 ILLUMINACLIP:$ADAPTERS:2:20:10:8:TRUE\
 SLIDINGWINDOW:6:30 LEADING:10 TRAILING:10 MINLEN:50
rm -f $O/trim_reads/"$B"-noPhiX-R1.fsq $O/trim_reads/"$B"-noPhiX-R2.fsq
cat $O/trim_reads/"$B"_R1.unpaired.fq $O/trim_reads/"$B"_R2.unpaired.fq\
 > $O/trim_reads/"$B".single.fq
rm -f $O/trim_reads/"$B"_R1.unpaired.fq $O/trim_reads/"$B"_R2.unpaired.fq
module unload java/jdk1.8.0_131 trimmomatic/0.35
for suff in _R1.paired.fq _R2.paired.fq ; do
  if [[ ! $(find $O/trim_reads/"$B""$suff" -type f -size +25M) ]]; then
    echo "ERROR: trimmed read unusually small for ${B}${suff}" >&2
    exit 1
  fi
done

# # Paired end overlap
# module load pear/0.9.10
# pear -f $O/trim_reads/"$B"_R1.paired.fq -r $O/trim_reads/"$B"_R2.paired.fq\
#  -o $O/trim_reads/$B --keep-original --p-value 0.01 --min-overlap 200\
#  --threads $NSLOTS
# module unload pear/0.9.10
# rm $O/trim_reads/"$B"_R1.paired.fq $O/trim_reads/"$B"_R2.paired.fq
# mv $O/trim_reads/"$B".unassembled.forward.fastq $O/trim_reads/"$B"_R1.paired.fq
# mv $O/trim_reads/"$B".unassembled.reverse.fastq $O/trim_reads/"$B"_R2.paired.fq
# ls -lh $O/trim_reads/"$B".assembled.fastq
# cat $O/trim_reads/"$B".assembled.fastq >> $O/trim_reads/"$B".single.fq
# rm $O/trim_reads/"$B".assembled.fastq

# Assemble; quit after 3 failed attempts
failed=0
while [[ ! -f $O/asm/"$B"/contigs.fasta ]] && [ $failed -lt 3 ]; do
  if [ $failed -gt 0 ]; then
    echo "ERROR: assembly file not produced by SPAdes for $B" >&2
    mv -f $O/asm/"$B"/spades.log $O/asm/"$B"/"$failed"of3-asm-attempt-failed.spades.log
    echo "INFO: retrying assembly for $B" >&2
  fi
  module load SPAdes/3.11.1
  spades.py --pe1-1 $O/trim_reads/"$B"_R1.paired.fq\
   --pe1-2 $O/trim_reads/"$B"_R2.paired.fq\
   --pe1-s $O/trim_reads/"$B".single.fq\
   -o $O/asm/"$B" --phred-offset 33\
   -t $NSLOTS --only-assembler --continue
  module unload SPAdes/3.11.1
  ((failed++))
done
if [[ ! -f "$O"/asm/"$B"/contigs.fasta ]]; then
  echo "ERROR: assembly file not produced by SPAdes for $B" >&2
  exit 1
fi

# Clean up asm dir and compress reads
bash $LAB_HOME/.bin/prune.SPAdes.assembly.dirs.bash $O/asm/"$B"
pigz --best $O/trim_reads/"$B".single.fq\
 $O/trim_reads/"$B"_R1.paired.fq\
 $O/trim_reads/"$B"_R2.paired.fq

# Post-process assembly
export PATH=$LAB_HOME/.anaconda2/bin:$PATH
source activate bpy2
python $LAB_HOME/.bin/filter.contigs.py\
 -i $O/asm/"$B"/contigs.fasta\
 -b "$B" -l 1000 -o $O/asm/"$B".uncorrected.fna 
source deactivate bpy2

# Verify sufficient bacterial genome size
if [[ ! $(find $O/asm/"$B".uncorrected.fna -type f -size +2M) ]]; then
  rm -f $O/asm/$B.uncorrected.fna
  echo "ERROR: genome assembly unusually small for $B" >&2
  echo "check $O/asm/$B/spades.log for details"
  exit 1
fi

# Correct cleaned contigs with cleaned reads
module load bwa/0.7.16 samtools/1.4.1 pilon/1.22
for _ in {1..3}; do
  bwa index $O/asm/"$B".uncorrected.fna
  bwa mem -t $NSLOTS -x intractg -v 3 $O/asm/"$B".uncorrected.fna\
   $O/trim_reads/"$B"_R1.paired.fq.gz $O/trim_reads/"$B"_R2.paired.fq.gz |\
   samtools sort -@ $NSLOTS --reference $O/asm/"$B".uncorrected.fna -l 9\
   -o $O/asm/"$B".bam
  rm -f $O/asm/"$B".uncorrected.fna.{ann,amb,bwt,pac,sa}
  samtools index $O/asm/"$B".bam
  pilon --genome $O/asm/"$B".uncorrected.fna --frags $O/asm/"$B".bam\
   --output "$B" --outdir $O/asm --changes --tracks --verbose\
   --fix snps,indels --mindepth 0.50
  grep -c '-' $O/asm/"$B".changes >> $O/asm/"$B".InDels-corrected.cnt.txt
  grep -vc '-' $O/asm/"$B".changes >> $O/asm/"$B".SNPs-corrected.cnt.txt
  rm -f $O/asm/"$B".{changes,uncorrected.fna}
  rm -f $O/asm/"$B"{*.wig,Pilon.bed}
  mv -f $O/asm/"$B".fasta $O/asm/"$B".uncorrected.fna
  sed -i 's/_pilon//g' $O/asm/"$B".uncorrected.fna
done
module unload bwa/0.7.16 samtools/1.4.1 pilon/1.22
mv -f $O/asm/"$B".uncorrected.fna $O/asm/"$B".fna

# Calculate coverage
module load BEDTools/2.26.0
sum_cov=$(bedtools genomecov -d -split -ibam $O/asm/"$B".bam \
 -g $O/asm/"$B".fna | awk '{sum+=$3} END{print sum}')
module unload BEDTools/2.26.0
rm -f $O/asm/"$B".{bam.bai,bam}
echo -e "${B}\t${sum_cov}" >> $O/qa/Summary.Illumina.CleanedReads-MappedBases.tab

# Annotate cleaned and corrected assembly
module load perl/5.16.1-MT prokka/1.12
prokka --outdir $O/annot/"$B" --prefix "$B"\
 --force --addgenes --locustag "$B" --mincontiglen 500\
 --evalue 1e-08 --cpus $NSLOTS $O/asm/"$B".fna
module unload perl/5.16.1-MT prokka/1.12
mv -f $O/annot/$B/$B.gbf $O/annot/$B.gbk
rm -rf $O/annot/$B
