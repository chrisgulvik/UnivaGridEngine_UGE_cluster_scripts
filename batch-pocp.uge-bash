#!/usr/bin/env bash


usage() {
  echo "
Usage: ${0##*/} InputDirectory [OutputDirectory] [-h|--help]

Computes the Percentage of Conserved Proteins (POCP) according to Qin et
al. (2014) J Bacteriol 196:2210-2215, DOI: 10.1128/JB.01688-14

Required:
  <InputDirectory>   All FastA and GenBank formatted files ending in:
                       {faa} and {gb,gbk,gbf,gbff}
                       with optional .gz compression will be analyzed.
                     Whitespace is forbidden in filenames.

                     Only files that exceed 33 kB in size within <InDir>
                     will be used for POCP comparisons.

Optional:
  -h | --help        Show this help message and exit.

  <OutputDirectory>  Location for the output files. Pre-computed pairwise
                     data will be skipped. Group output summary data
                     files will be overwritten.
                     Default: current working directory.

  "
  }

check_submit_status()
{
  # 1=job ID number; 2=job IDs logfile
  if [[ $1 != *submitted* ]]; then
    echo 'ERROR: improper job submission' >&2
    exit 1
  fi
  echo "$1" >> "$2"
}

# Requirements
command -v qsub >/dev/null 2>&1 || { echo 'ERROR: qsub not found' >&2; exit 1; }
[[ $1 == "--help" || $1 == "-h" ]] && { usage; exit 0; }
if [[ $# -lt 1  || $# -gt 2 ]]; then
  echo "ERROR: improper number ("$#") of arguments provided" >&2
  usage
  exit 1
fi
source $HOME/.bashrc
if [[ -z "$LAB_HOME" ]]; then
  echo 'ERROR: $LAB_HOME not set' >&2
  exit 1
fi

# I/O handling
IN=$(readlink -f "$1")
if [[ -z "$2" ]]; then
  OUT="${PWD}"
else
  OUT=$(readlink -f "$2")
fi
[ ! -d "$OUT"/.log ] && mkdir -pv "$OUT"/.log > /dev/null
LOG_BASE=$(basename $0 .uge-bash)
LOGFILE="$OUT"/.log/"$LOG_BASE".log.txt
JOB_IDS="$OUT"/.log/"$LOG_BASE".job_ids.txt
TMP_DIR=$(mktemp --tmpdir=/dev/shm \
 --directory "${USER}".XXXXXX)
if [ $? -ne 0 ]; then
  echo 'ERROR: failed to make /dev/shm temporary ramdisk dir' >&2
  echo 'INFO: using /tmp HDD space for temporary space' >&2
  TMP_DIR=$(mktemp --tmpdir=/tmp \
   --directory "${USER}".XXXXXX)
  echo "INFO: using $TMP_DIR temporary HDD dir" >&2
else
  echo "INFO: using $TMP_DIR temporary ramdisk dir" >&2
fi
trap '{ rm -rf "$TMP_DIR"; exit; }' EXIT INT QUIT TERM
if [ ! -d "$TMP_DIR" ]; then
  echo "ERROR: absent $TMP_DIR directory" >&2
  exit 1
fi

# Log system and user info for debugging
echo "[START]           $(date)" > "$LOGFILE"
echo "[SYS]             $(uname -nro)" >> "$LOGFILE"
echo "[USER]            $USER" >> "$LOGFILE"
echo "[CWD]             $PWD" >> "$LOGFILE"
source /etc/profile.d/modules.sh && module purge
echo "[MODULES LOADED]  $(module list 2>&1 | \
  sed 's/Currently Loaded Modulefiles://1')" >> "$LOGFILE"
echo -e "[PATH]            $PATH\n" >> "$LOGFILE"
echo "[I/O]" >> "$LOGFILE"
echo "Input directory:  $IN" | tee -a "$LOGFILE"
echo -e "Output directory: $OUT\n" | tee -a "$LOGFILE"

# Prevent input files with whitespace
if [[ $(find . -maxdepth 1 -type f -regextype posix-extended \
  -regex ".*[[:space:]].*\.(faa|gb,gbk,gbf,gbff)($|\.gz$)" \
  | wc -l) -gt 0 ]]; then
  echo 'ERROR: whitespace within input filenames are not allowed' >&2
  echo 'Offending files are:' >&2
  find . -maxdepth 1 -type f -regextype posix-extended \
   -regex ".*[[:space:]].*\.(faa|gb,gbk,gbf,gbff)($|\.gz$)" \
   -printf '%p\t%s bytes\n' >&2
  exit 1
fi

# Gather input files
shopt -s nullglob
PROT=( "${IN}"/*.{faa,gb,gbk,gbf,gbff}{'',.gz} )
shopt -u nullglob
echo 'Input files:' >> "$LOGFILE"
printf '%s\n' "${PROT[@]}" >> "$LOGFILE"
echo '' >> "$LOGFILE"
[[ "${PROT[@]}" =~ "," ]] && { usage; exit 1; }
echo -e "[PROTEOMES]\n$(echo ${PROT[@]} | tr ' ' '\n')\n" | \
  tee -a "$LOGFILE"
if [ ${#PROT[@]} -lt 2 ]; then
  echo 'ERROR: at least 2 proteomes are required for batch analysis' >&2
  exit 1
fi

# Report start
NAME="$(stat -c '%U' ${0})"
echo -e "POCP started on $(date) by ${USER}" | mail \
 -s "started ${#PROT[@]} samples for POCP [HPC]" \
 -a "${LOGFILE}" \
 "${NAME:-$USER}@cdc.gov"

# Filter out and report unusually small proteomes
FAA=()
for A in "${PROT[@]}"; do
  # TO-DO: file content corruption and format validation tests
  if [[ $(find -L "$A" -type f -size +33k 2>/dev/null) ]]; then
    FAA+=("$A")
  else
    echo "INFO: $A not >33 kB so it was excluded in the analysis" >&2
  fi
done
if [ ${#FAA[@]} -lt 2 ]; then
  echo 'ERROR: found <2 proteome files >33 kB' >&2
  exit 1
fi

# Generate list of pairwise comparisons
proteomes="${TMP_DIR}/proteomes.fofn"
printf "%s\n" "${FAA[@]}" > "${proteomes}"
tasks_per_job=20000
export OUT proteomes tasks_per_job
readarray -t COMBO_FILES < <(python3 - <<-EOF
	import itertools, os
	with open(os.getenv('proteomes'), 'r') as ifh:
	    proteome_filenames = [ln.rstrip('\n') for ln in ifh]
	def iter_chunks(iterable, items_per_chunk=int(os.getenv('tasks_per_job'))):
	    while True:
	        iter_chunk = itertools.islice(iterable, items_per_chunk)
	        peek = next(iter_chunk)
	        yield itertools.chain([peek], iter_chunk)

	combos = itertools.combinations(proteome_filenames, 2)
	for idx, chunk in enumerate(iter_chunks(combos), start=1):
	    outfile = os.path.join(os.getenv('OUT'), 'pairs.' + str(idx) + '.fofn')
	    with open(outfile, 'w') as ofh:
	        ofh.write('\n'.join('{}\t{}'.format(j, k) for j, k in chunk))
	    print(outfile)
EOF
)
if [ ${#COMBO_FILES[@]} -eq 0 ]; then
  echo 'ERROR: no file pairs to submit for analysis' >&2
  exit 1
fi

# Submit task array jobs
echo -n '' > "$JOB_IDS"
pairs=0
for i in "${!COMBO_FILES[@]}"; do
  tasks=$(awk 'END{print NR}' "${COMBO_FILES[i]}")
  [ $tasks -eq 0 ] && { echo "ERROR: empty ${COMBO_FILES[i]}" >&2; exit 1; }
  (( pairs += "${tasks}" ))
  JID=$(qsub -t 1-"${tasks}":1 -pe smp 1-128 \
    -q all.q -q short.q -N pocp.$((i + 1)) \
    -o $OUT/.log -e $OUT/.log \
    -v FOFN="${COMBO_FILES[i]}",O="${OUT}",ALN_FRAC=50,PERC_ID=40 \
    $LAB_HOME/.job/_aai.run.uge-bash)
  check_submit_status "$JID" "$JOB_IDS"
  echo "$JID" >> "$JOB_IDS"
done
echo "Submitted ${pairs} bidirectional POCP tasks as ${#COMBO_FILES[@]} jobs..."
sleep 0.1

# Summarize all pairwise alignments
JOBS=$(cat "$JOB_IDS" | cut -f 3 -d ' ' | sed 's/\..*$/,/' | \
  tr -d '\n' | sed 's/,$//')
if [ ${#JOBS} -lt $((`getconf ARG_MAX`-300)) ]; then
  echo "Submitting AAI and POCP summary jobs..."
  JID=$(qsub -q all.q -q short.q -N aai.sum \
    -o $OUT/.log -e $OUT/.log -hold_jid ${JOBS:-0000001} \
    -v P=$OUT \
    $LAB_HOME/.job/_aai.summarize.uge-bash)
  check_submit_status "$JID" "$JOB_IDS"
  JID=$(qsub -q all.q -q short.q -N pocp.sum \
    -o $OUT/.log -e $OUT/.log -hold_jid ${JOBS:-0000001} \
    -v P=$OUT \
    $LAB_HOME/.job/_pocp.summarize.uge-bash)
  check_submit_status "$JID" "$JOB_IDS"
  echo 'All jobs submitted, so you can logout and check back later!'
else
  echo "AAI and POCP summary jobs skipped due to high sample number"
  echo "\$JOBS is ${#JOBS} char long which exceeds ARG_MAX"
  echo "You will need to summarize the results manually"
fi
