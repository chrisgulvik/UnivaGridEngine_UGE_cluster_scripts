#!/usr/bin/env bash


# Input requirements
[[ -z "$GENE" ]] && { echo 'ERROR: $GENE not set' >&2; exit 1; }
[[ -z "$EXTRN" ]] && { echo 'ERROR: $EXTRN not set' >&2; exit 1; }
[[ -z "$LOGFILE" ]] && { echo 'ERROR: $LOGFILE not set' >&2; exit 1; }
[[ -z "$OUT" ]] && { echo 'ERROR: $OUT not set' >&2; exit 1; }

source /etc/profile.d/modules.sh
source $HOME/.bashrc
export PATH="$LAB_HOME/.anaconda2/bin:$PATH"

extract_sequence() {
  local _outfile="${OUT}"/phy/"${GENE}"."${B}".fa
  if [[ "$1" == "product" ]]; then
    python "$LAB_HOME"/.bin/extract.record.from.genbank.py -i "${file}" \
     -u product -o "${_outfile}" -q "${PROD}" \
     --search-type any_q_in_rec
  elif [[ "$1" == "gene" ]]; then
    python "$LAB_HOME"/.bin/extract.record.from.genbank.py -i "${file}" \
     -u gene -o "${_outfile}" -q "${GENE}" \
     --search-type any_q_is_rec
  elif [[ "$1" == "gene_or_exactproduct" ]]; then
    python "$LAB_HOME"/.bin/extract.record.from.genbank.py -i "${file}" \
     -u gene -o "${_outfile}" -q "${GENE}" \
     --search-type any_q_is_rec
    if [[ ! -f "${_outfile}" ]] || [[ ! -s "${_outfile}" ]]; then
      python "$LAB_HOME"/.bin/extract.record.from.genbank.py -i "${file}" \
       -u product -o "${_outfile}" -q "${PROD}" \
       --search-type any_q_is_rec
    fi
  elif [[ "$1" == "gene_or_withinproduct" ]]; then
    python "$LAB_HOME"/.bin/extract.record.from.genbank.py -i "${file}" \
     -u gene -o "${_outfile}" -q "${GENE}" \
     --search-type any_q_is_rec
    if [[ ! -f "${_outfile}" ]] || [[ ! -s "${_outfile}" ]]; then
      python "$LAB_HOME"/.bin/extract.record.from.genbank.py -i "${file}" \
       -u product -o "${_outfile}" -q "${PROD}" \
       --search-type any_q_in_rec
    fi
  elif [[ "$1" == "rrna" ]]; then
    python "$LAB_HOME"/.bin/extract.record.from.genbank.py -i "${file}" \
     -u product -o "${_outfile}" -q '16S ribosomal RNA' \
     --search-type any_q_is_rec -f rRNA
    if [[ ! -f "${_outfile}" ]] || [[ ! -s "${_outfile}" ]]; then
      echo -n "INFO: absent 16S annotation in ${file};" >&2
      echo ' trying RNAmmer...' >&2
      python "$LAB_HOME"/.bin/genbank2fasta.py -i "${file}" \
       -o "${file}".tmp-fasta
      module load rnammer/1.2
      rnammer -S bac -m ssu -f "${_outfile}" < "${file}".tmp-fasta
      module unload rnammer/1.2
      rm "${file}".tmp-fasta
      if [[ $(grep -c '>' "${_outfile}") -eq 0 ]]; then
        echo "INFO: RNAmmer was unable to locate a 16S sequence in ${file}" >&2
        rm "${_outfile}"
      fi
    fi
  fi
}

# Find annotated GenBank files
shopt -s nullglob
GBK=( "$OUT"/*.{gb,gbk,gbf,gbff}{'',.gz} )
shopt -u nullglob
if [[ "${#GBK[@]}" -eq 0 ]]; then
  echo "ERROR: unable to find GenBank files in ${OUT}" >&2
  exit 1
else
  echo -e "[ANNOTATED FILES] FOR $GENE\n$(echo ${GBK[@]} | \
  tr ' ' '\n')\n" >> "$LOGFILE"
fi

# Extract FastA sequence record from each GenBank file
source activate bpy2
for file in "${GBK[@]}"; do
  B=$(basename "${file}" .gz | \
   sed -e 's/\.gbff//1' -e 's/\.gbf//1' -e 's/\.gbk//1' -e 's/\.gb//1')
  extract_sequence "${EXTRN}"
  [ ! -f "$OUT"/phy/"$GENE"."$B".fa ] && { continue; }
  if [[ $(grep -c '>' "$OUT"/phy/"$GENE"."$B".fa) -gt 9 ]]; then
    echo -n "skipping $OUT/phy/$GENE.$B.fa due to too many (>9) sequence" >&2
    echo 'records extracted' >&2 
  elif [[ $(grep -c '>' "$OUT"/phy/"$GENE"."$B".fa) -gt 1 ]]; then
    awk -v awk_var="$B" '/^>/{print ">" awk_var "_" ++i; next} {print}' \
      "$OUT"/phy/"$GENE"."$B".fa > "$OUT"/phy/"$GENE"."$B".fa-renamed ;
    rm "$OUT"/phy/"$GENE"."$B".fa
    python "$LAB_HOME"/.bin/split.multifasta.py \
      -i "$OUT"/phy/"$GENE"."$B".fa-renamed \
      -o "$OUT"/phy -p "$GENE"."$B" -e .fa ;
    rm "$OUT"/phy/"$GENE"."$B".fa-renamed
  else
    awk -v awk_var="$B" '/^>/{print ">" awk_var; next} {print}' \
      "$OUT"/phy/"$GENE"."$B".fa > "$OUT"/phy/"$GENE"."$B".fa-renamed ;
    rm "$OUT"/phy/"$GENE"."$B".fa
    mv "$OUT"/phy/"$GENE"."$B".fa-renamed "$OUT"/phy/"$GENE"."$B".fa
  fi
done
source deactivate


# Do comparisons and build tree if >1 input GenBank file
if [[ "${#GBK[@]}" -eq 1 ]]; then
  echo -n 'INFO: require at least two input GenBank files for similarity' >&2
  echo ' calculations and phylogenetic tree construction' >&2
  exit 0
fi

# Calculate pairwise similarities
shopt -s nullglob
FA=( "$OUT"/phy/"$GENE".*.fa )
shopt -u nullglob
if [[ "${#FA[@]}" -lt 3 ]]; then
  echo "INFO: at least 3 $GENE sequences are required; found ${#FA[@]}" >&2
  exit 0
fi
module load ncbi-blast+/2.6.0
python "$LAB_HOME"/.bin/calc.pairwise.similarities.py -e fa -p "$GENE". \
  -i "$OUT"/phy --aligner blastn -o "$OUT"/phy/"$GENE".PairSim.tsv
module unload ncbi-blast+/2.6.0
python "$LAB_HOME"/.bin/pairwiseTo2d.py -i "$OUT"/phy/"$GENE".PairSim.tsv \
  --sort -o "$OUT"/phy/"$GENE".Pairwise_Similarities.tab
rm "$OUT"/phy/"$GENE".PairSim.tsv

# Merge and align extracted sequences
cat "$OUT"/phy/"$GENE".*.fa > "$OUT"/phy/"$GENE".merged.fasta
rm "$OUT"/phy/"$GENE".*.fa
module load muscle/3.8.425
muscle -in "$OUT"/phy/"$GENE".merged.fasta -out "$OUT"/phy/"$GENE".fas.aln \
  -maxiters 50 -maxhours 2 -quiet
module unload muscle/3.8.425
rm "$OUT"/phy/"$GENE".merged.fasta

# Build NJ tree
source activate Rphylo
echo "
library('ape')
infile = '$OUT/phy/$GENE.fas.aln'
num.boots = 1000
f <- function(x) {nj(dist.dna(x, model='JC69', variance=FALSE, gamma=FALSE, p=TRUE))}
seqs.aln <- read.dna(infile, format='fasta')
NJ.tree <- f(seqs.aln)
NJ.boots <- boot.phylo(NJ.tree, seqs.aln, f, B=num.boots, trees=FALSE, quiet=TRUE)
NJ.tree$node.label <- round(NJ.boots/num.boots*100, 1)
write.tree(NJ.tree, file='$OUT/phy/$GENE.NJ.tre', append=FALSE, digits=20)
" | R --slave --vanilla
source deactivate
module load figtree/1.4.3
figtree -graphic PDF "$OUT"/phy/"$GENE".NJ.tre "$OUT"/phy/"$GENE".NJ.pdf > /dev/null
module unload figtree/1.4.3
