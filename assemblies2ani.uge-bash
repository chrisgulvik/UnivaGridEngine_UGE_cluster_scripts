#!/usr/bin/env bash


function usage() { 
  echo "
Usage: ${0##*/} InputDirectory [OutputDirectory] [-h|--help]

Required:
  <InputDirectory>   All assembly files ending in fa,fas,fsa,fna,fasta
                     will be analyzed. Commas are forbidden in filenames.

                     If a genome FastA file is found that corresponds
                     to the genome sample name found in <InDir> in either
                       <InDir>/annot/<sample>/<sample>.fna,
                        -OR- <InDir>/<sample>/<sample>.fna
                        -OR- <InDir>/<sample>.fna
                     ANI will use it, otherwise Prokka will generate
                     an annotated genome first.

Optional:
  -h | --help        Show this help message and exit.

  <OutputDirectory>  Location for the output files, which
                     includes job logfiles. Output files
                     will be overwritten if already present.
                     Default: current working directory.

  "
  }

# Requirements
command -v qsub >/dev/null 2>&1 || { echo 'ERROR: qsub not found' >&2; exit 1; }
[[ $1 == "--help" || $1 == "-h" ]] && { usage; exit 0; }
if [[ $# -lt 1  || $# -gt 2 ]]; then
  echo "ERROR: improper number ("$#") of arguments provided" >&2
  usage
  exit 1
fi
source $HOME/.bashrc
if [[ -z "$LAB_HOME" ]]; then
  echo 'ERROR: $LAB_HOME not set' >&2
  exit 1
fi

# I/O handling
IN=$(readlink -f "$1")
if [[ -z "$2" ]]; then
  OUT="${PWD}"
else
  OUT=$(readlink -f "$2")
fi
[ ! -d "$OUT"/.log ] && mkdir -pv "$OUT"/.log > /dev/null
LOG_BASE=$(basename $0 .uge-bash)
LOGFILE="$OUT"/.log/"$LOG_BASE".log.txt
JOB_IDS="$OUT"/.log/"$LOG_BASE".job_ids.txt

# Log system and user info for debugging
echo "[START]           $(date)" > "$LOGFILE"
echo "[SYS]             $(uname -nro)" >> "$LOGFILE"
echo "[USER]            $USER" >> "$LOGFILE"
echo "[CWD]             $PWD" >> "$LOGFILE"
source /etc/profile.d/modules.sh && module purge
echo "[MODULES LOADED]  $(module list 2>&1 | \
  sed 's/Currently Loaded Modulefiles://1')" >> "$LOGFILE"
echo -e "[PATH]            $PATH\n" >> "$LOGFILE"
echo "[I/O]" >> "$LOGFILE"
echo "Input directory:  $IN" | tee -a "$LOGFILE"
echo -e "Output directory: $OUT\n" | tee -a "$LOGFILE"

cd $IN
if [[ $(find . -maxdepth 1 -type f -regextype posix-extended \
  -regex ".*[[:space:]].*\.(fa|fas|fsa|fna|fasta)" | wc -l) -gt 0 ]]; then
  echo 'ERROR: whitespace within input filenames are not allowed' >&2
  echo 'Offending files are:' >&2
  find . -maxdepth 1 -type f -regextype posix-extended \
   -regex ".*[[:space:]].*\.(fa|fas|fsa|fna|fasta)" \
   -printf '%p\t%s bytes\n' >&2
  exit 1
fi
shopt -s nullglob
ASM=( *.{fa,fas,fsa,fna,fasta} )
shopt -u nullglob
[[ "${ASM[@]}" =~ "," ]] && { usage; exit 1; }
echo -e "[ASSEMBLIES]\n$(echo ${ASM[@]} | tr ' ' '\n')\n" | \
  tee -a "$LOGFILE"

if [ ${#ASM[@]} -lt 3 ]; then
  echo 'ERROR: at least 3 genomes are required for batch analysis' >&2
  exit 1
fi

cd $OUT
echo "Annotating ${#ASM[@]} genomes..."
echo -n '' > "$JOB_IDS"
FNA=()
for A in "${ASM[@]}"; do
  B=$(basename ${A%\.*} | sed 's/[_-\.\(\)]//g')
  if [[ $(find "${OUT}/annot/${B}/${B}.fna" -type f -size +2M 2>/dev/null) ]]; then
    FNA+=("${OUT}/annot/${B}/${B}.fna")
  elif [[ $(find "${OUT}/${B}/${B}.fna" -type f -size +2M 2>/dev/null) ]]; then
    FNA+=("${OUT}/${B}/${B}.fna")
  elif [[ $(find "${OUT}/${B}.fna" -type f -size +2M 2>/dev/null) ]]; then
    FNA+=("${OUT}/${B}.fna")
  else
    JID=$(qsub -q all.q -q short.q -pe smp 1-128 -N ann.$B -o $OUT/.log -e $OUT/.log <<- EOF
		source /etc/profile.d/modules.sh
		module load perl/5.16.1-MT prokka/1.13.3
		prokka --outdir $OUT/annot/$B --prefix $B --addgenes --locustag $B \
			--mincontiglen 250 --evalue 1e-06 --cpus \$NSLOTS --force $IN/$A
		rm -f "${OUT}/${B}/${B}.{err,ffn,fsa,log,sqn,tbl,txt}"
		EOF
    )
    [[ $JID != *submitted* ]] && { echo 'ERROR: improper job submission' >&2; exit 1; }
    echo "$JID" >> "$JOB_IDS"
    FNA+=("${OUT}/annot/${B}/${B}.fna")
  fi
done

FNA_str=$(printf ",%s" "${FNA[@]}" | sed 's/^,//1')
export FNA_str
readarray -t COMBO < <(python - <<-EOF
	import itertools, os
	a = os.getenv('FNA_str').split(',')
	l = list(itertools.combinations(a, 2))
	print('\n'.join('{},{}'.format(j, k) for j, k in l))
EOF
)

echo "Submitting ${#COMBO[@]} bidirectional ANI query jobs..."
JOBS=$(cat "$JOB_IDS" | cut -f 3 -d ' ' | sed -e 's/$/,/' | \
  tr -d '\n' | sed -e 's/,$//')
for C in "${COMBO[@]}"; do
  C1=${C%%,*}
  C2=${C##*,}
  D1=$(basename ${C1%.*})
  D2=$(basename ${C2%.*})
  JID=$(qsub -q all.q -q short.q -pe smp 1-128 -N ani.$D1$D2 \
    -o $OUT/.log -e $OUT/.log -hold_jid ${JOBS:-0000001} \
    -v S1=$C1,S2=$C2,O=$OUT \
    $LAB_HOME/.job/_ani.run.uge-bash)
  [[ $JID != *submitted* ]] && { echo 'ERROR: improper job submission' >&2; exit 1; }
  echo "$JID" >> "$JOB_IDS"
done
sleep 0.5

JOBS=$(cat "$JOB_IDS" | cut -f 3 -d ' ' | sed -e 's/$/,/' | \
  tr -d '\n' | sed -e 's/,$//')
if [ ${#JOBS} -lt $((`getconf ARG_MAX`-300)) ]; then
  echo "Submitting ANI summary job..."
  JID=$(qsub -q all.q -q short.q -N ani.sum \
    -o $OUT/.log -e $OUT/.log -hold_jid ${JOBS:-0000001} \
    -v P=$OUT \
    $LAB_HOME/.job/_ani.summarize.uge-bash)
  [[ $JID != *submitted* ]] && { echo 'ERROR: improper job submission' >&2; exit 1; }
  echo 'All jobs submitted, so you can logout and check back later!'
else
  echo "ANI summary job skipped due to high sample number"
  echo "\$JOBS is ${#JOBS} char long which exceeds ARG_MAX"
fi
